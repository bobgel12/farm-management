# Production Dockerfile for Chicken House Management System
FROM node:18-alpine as frontend-build

# Build frontend
WORKDIR /app/frontend
COPY frontend/package*.json ./
RUN npm ci
COPY frontend/ ./
RUN npm run build

# Backend stage
FROM python:3.11-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive

# Set work directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    postgresql-client \
    build-essential \
    libpq-dev \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY backend/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy backend code
COPY backend/ .

# Create necessary directories
RUN mkdir -p logs staticfiles

# Copy frontend build directly to staticfiles directory
COPY --from=frontend-build /app/frontend/build ./staticfiles/

# Debug: Show what's in the staticfiles directory
RUN echo "=== Contents of staticfiles/ directory ===" && ls -la staticfiles/
RUN echo "=== Contents of staticfiles/js/ directory ===" && ls -la staticfiles/js/ || echo "No js directory found"
RUN echo "=== Contents of staticfiles/css/ directory ===" && ls -la staticfiles/css/ || echo "No css directory found"

# Also copy to static/ for Django's collectstatic
COPY --from=frontend-build /app/frontend/build ./static/

# Collect static files (this will copy from static/ to staticfiles/)
RUN python manage.py collectstatic --noinput

# Debug: Show what was collected
RUN echo "=== Contents of staticfiles/ directory after collectstatic ===" && ls -la staticfiles/

# Create non-root user
RUN adduser --disabled-password --gecos '' appuser
RUN chown -R appuser:appuser /app
USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT:-8000}/api/health/ || exit 1

# Start command
CMD ["python", "simple_startup.py"]
